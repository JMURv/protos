// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/pb/products.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Item_ItemSearch_FullMethodName        = "/user.Item/ItemSearch"
	Item_ItemAttrSearch_FullMethodName    = "/user.Item/ItemAttrSearch"
	Item_ListItems_FullMethodName         = "/user.Item/ListItems"
	Item_CreateItem_FullMethodName        = "/user.Item/CreateItem"
	Item_GetItem_FullMethodName           = "/user.Item/GetItem"
	Item_UpdateItem_FullMethodName        = "/user.Item/UpdateItem"
	Item_DeleteItem_FullMethodName        = "/user.Item/DeleteItem"
	Item_ListRelatedItems_FullMethodName  = "/user.Item/ListRelatedItems"
	Item_ListCategoryItems_FullMethodName = "/user.Item/listCategoryItems"
	Item_HitItems_FullMethodName          = "/user.Item/HitItems"
	Item_RecItems_FullMethodName          = "/user.Item/RecItems"
)

// ItemClient is the client API for Item service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemClient interface {
	ItemSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
	ItemAttrSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
	ListItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
	CreateItem(ctx context.Context, in *ItemMsg, opts ...grpc.CallOption) (*ItemMsg, error)
	GetItem(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*ItemMsg, error)
	UpdateItem(ctx context.Context, in *ItemWithUid, opts ...grpc.CallOption) (*ItemMsg, error)
	DeleteItem(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*ItemMsg, error)
	ListRelatedItems(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*RelatedItemsList, error)
	ListCategoryItems(ctx context.Context, in *ListCategoryItemsReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
	HitItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
	RecItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error)
}

type itemClient struct {
	cc grpc.ClientConnInterface
}

func NewItemClient(cc grpc.ClientConnInterface) ItemClient {
	return &itemClient{cc}
}

func (c *itemClient) ItemSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_ItemSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ItemAttrSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_ItemAttrSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ListItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_ListItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) CreateItem(ctx context.Context, in *ItemMsg, opts ...grpc.CallOption) (*ItemMsg, error) {
	out := new(ItemMsg)
	err := c.cc.Invoke(ctx, Item_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) GetItem(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*ItemMsg, error) {
	out := new(ItemMsg)
	err := c.cc.Invoke(ctx, Item_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) UpdateItem(ctx context.Context, in *ItemWithUid, opts ...grpc.CallOption) (*ItemMsg, error) {
	out := new(ItemMsg)
	err := c.cc.Invoke(ctx, Item_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) DeleteItem(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*ItemMsg, error) {
	out := new(ItemMsg)
	err := c.cc.Invoke(ctx, Item_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ListRelatedItems(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*RelatedItemsList, error) {
	out := new(RelatedItemsList)
	err := c.cc.Invoke(ctx, Item_ListRelatedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) ListCategoryItems(ctx context.Context, in *ListCategoryItemsReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_ListCategoryItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) HitItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_HitItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemClient) RecItems(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedItemRes, error) {
	out := new(PaginatedItemRes)
	err := c.cc.Invoke(ctx, Item_RecItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServer is the server API for Item service.
// All implementations must embed UnimplementedItemServer
// for forward compatibility
type ItemServer interface {
	ItemSearch(context.Context, *SearchReq) (*PaginatedItemRes, error)
	ItemAttrSearch(context.Context, *SearchReq) (*PaginatedItemRes, error)
	ListItems(context.Context, *ListReq) (*PaginatedItemRes, error)
	CreateItem(context.Context, *ItemMsg) (*ItemMsg, error)
	GetItem(context.Context, *UuidMsg) (*ItemMsg, error)
	UpdateItem(context.Context, *ItemWithUid) (*ItemMsg, error)
	DeleteItem(context.Context, *UuidMsg) (*ItemMsg, error)
	ListRelatedItems(context.Context, *UuidMsg) (*RelatedItemsList, error)
	ListCategoryItems(context.Context, *ListCategoryItemsReq) (*PaginatedItemRes, error)
	HitItems(context.Context, *ListReq) (*PaginatedItemRes, error)
	RecItems(context.Context, *ListReq) (*PaginatedItemRes, error)
	mustEmbedUnimplementedItemServer()
}

// UnimplementedItemServer must be embedded to have forward compatible implementations.
type UnimplementedItemServer struct {
}

func (UnimplementedItemServer) ItemSearch(context.Context, *SearchReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemSearch not implemented")
}
func (UnimplementedItemServer) ItemAttrSearch(context.Context, *SearchReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemAttrSearch not implemented")
}
func (UnimplementedItemServer) ListItems(context.Context, *ListReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedItemServer) CreateItem(context.Context, *ItemMsg) (*ItemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemServer) GetItem(context.Context, *UuidMsg) (*ItemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemServer) UpdateItem(context.Context, *ItemWithUid) (*ItemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemServer) DeleteItem(context.Context, *UuidMsg) (*ItemMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemServer) ListRelatedItems(context.Context, *UuidMsg) (*RelatedItemsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelatedItems not implemented")
}
func (UnimplementedItemServer) ListCategoryItems(context.Context, *ListCategoryItemsReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryItems not implemented")
}
func (UnimplementedItemServer) HitItems(context.Context, *ListReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HitItems not implemented")
}
func (UnimplementedItemServer) RecItems(context.Context, *ListReq) (*PaginatedItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecItems not implemented")
}
func (UnimplementedItemServer) mustEmbedUnimplementedItemServer() {}

// UnsafeItemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServer will
// result in compilation errors.
type UnsafeItemServer interface {
	mustEmbedUnimplementedItemServer()
}

func RegisterItemServer(s grpc.ServiceRegistrar, srv ItemServer) {
	s.RegisterService(&Item_ServiceDesc, srv)
}

func _Item_ItemSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ItemSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ItemSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ItemSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ItemAttrSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ItemAttrSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ItemAttrSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ItemAttrSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ListItems(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).CreateItem(ctx, req.(*ItemMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).GetItem(ctx, req.(*UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemWithUid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).UpdateItem(ctx, req.(*ItemWithUid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).DeleteItem(ctx, req.(*UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ListRelatedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ListRelatedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ListRelatedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ListRelatedItems(ctx, req.(*UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_ListCategoryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).ListCategoryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_ListCategoryItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).ListCategoryItems(ctx, req.(*ListCategoryItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_HitItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).HitItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_HitItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).HitItems(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Item_RecItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServer).RecItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Item_RecItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServer).RecItems(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Item_ServiceDesc is the grpc.ServiceDesc for Item service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Item_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Item",
	HandlerType: (*ItemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ItemSearch",
			Handler:    _Item_ItemSearch_Handler,
		},
		{
			MethodName: "ItemAttrSearch",
			Handler:    _Item_ItemAttrSearch_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _Item_ListItems_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _Item_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Item_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Item_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Item_DeleteItem_Handler,
		},
		{
			MethodName: "ListRelatedItems",
			Handler:    _Item_ListRelatedItems_Handler,
		},
		{
			MethodName: "listCategoryItems",
			Handler:    _Item_ListCategoryItems_Handler,
		},
		{
			MethodName: "HitItems",
			Handler:    _Item_HitItems_Handler,
		},
		{
			MethodName: "RecItems",
			Handler:    _Item_RecItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/products.proto",
}

const (
	Category_ListCategories_FullMethodName        = "/user.Category/ListCategories"
	Category_CreateCategory_FullMethodName        = "/user.Category/CreateCategory"
	Category_CategorySearch_FullMethodName        = "/user.Category/CategorySearch"
	Category_CategoryFiltersSearch_FullMethodName = "/user.Category/CategoryFiltersSearch"
	Category_GetCategory_FullMethodName           = "/user.Category/GetCategory"
	Category_UpdateCategory_FullMethodName        = "/user.Category/UpdateCategory"
	Category_DeleteCategory_FullMethodName        = "/user.Category/DeleteCategory"
	Category_ListCategoryFilters_FullMethodName   = "/user.Category/ListCategoryFilters"
)

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryClient interface {
	ListCategories(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedCategoryRes, error)
	CreateCategory(ctx context.Context, in *CategoryMsg, opts ...grpc.CallOption) (*CategoryMsg, error)
	CategorySearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedCategoryRes, error)
	CategoryFiltersSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedFilterRes, error)
	GetCategory(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*CategoryMsg, error)
	UpdateCategory(ctx context.Context, in *CategoryWithSlug, opts ...grpc.CallOption) (*CategoryMsg, error)
	DeleteCategory(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*Empty, error)
	ListCategoryFilters(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*FilterListRes, error)
}

type categoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryClient(cc grpc.ClientConnInterface) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) ListCategories(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedCategoryRes, error) {
	out := new(PaginatedCategoryRes)
	err := c.cc.Invoke(ctx, Category_ListCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) CreateCategory(ctx context.Context, in *CategoryMsg, opts ...grpc.CallOption) (*CategoryMsg, error) {
	out := new(CategoryMsg)
	err := c.cc.Invoke(ctx, Category_CreateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) CategorySearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedCategoryRes, error) {
	out := new(PaginatedCategoryRes)
	err := c.cc.Invoke(ctx, Category_CategorySearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) CategoryFiltersSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedFilterRes, error) {
	out := new(PaginatedFilterRes)
	err := c.cc.Invoke(ctx, Category_CategoryFiltersSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) GetCategory(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*CategoryMsg, error) {
	out := new(CategoryMsg)
	err := c.cc.Invoke(ctx, Category_GetCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) UpdateCategory(ctx context.Context, in *CategoryWithSlug, opts ...grpc.CallOption) (*CategoryMsg, error) {
	out := new(CategoryMsg)
	err := c.cc.Invoke(ctx, Category_UpdateCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) DeleteCategory(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Category_DeleteCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) ListCategoryFilters(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*FilterListRes, error) {
	out := new(FilterListRes)
	err := c.cc.Invoke(ctx, Category_ListCategoryFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
// All implementations must embed UnimplementedCategoryServer
// for forward compatibility
type CategoryServer interface {
	ListCategories(context.Context, *ListReq) (*PaginatedCategoryRes, error)
	CreateCategory(context.Context, *CategoryMsg) (*CategoryMsg, error)
	CategorySearch(context.Context, *SearchReq) (*PaginatedCategoryRes, error)
	CategoryFiltersSearch(context.Context, *SearchReq) (*PaginatedFilterRes, error)
	GetCategory(context.Context, *SlugMsg) (*CategoryMsg, error)
	UpdateCategory(context.Context, *CategoryWithSlug) (*CategoryMsg, error)
	DeleteCategory(context.Context, *SlugMsg) (*Empty, error)
	ListCategoryFilters(context.Context, *SlugMsg) (*FilterListRes, error)
	mustEmbedUnimplementedCategoryServer()
}

// UnimplementedCategoryServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServer struct {
}

func (UnimplementedCategoryServer) ListCategories(context.Context, *ListReq) (*PaginatedCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedCategoryServer) CreateCategory(context.Context, *CategoryMsg) (*CategoryMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedCategoryServer) CategorySearch(context.Context, *SearchReq) (*PaginatedCategoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategorySearch not implemented")
}
func (UnimplementedCategoryServer) CategoryFiltersSearch(context.Context, *SearchReq) (*PaginatedFilterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryFiltersSearch not implemented")
}
func (UnimplementedCategoryServer) GetCategory(context.Context, *SlugMsg) (*CategoryMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedCategoryServer) UpdateCategory(context.Context, *CategoryWithSlug) (*CategoryMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedCategoryServer) DeleteCategory(context.Context, *SlugMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedCategoryServer) ListCategoryFilters(context.Context, *SlugMsg) (*FilterListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategoryFilters not implemented")
}
func (UnimplementedCategoryServer) mustEmbedUnimplementedCategoryServer() {}

// UnsafeCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServer will
// result in compilation errors.
type UnsafeCategoryServer interface {
	mustEmbedUnimplementedCategoryServer()
}

func RegisterCategoryServer(s grpc.ServiceRegistrar, srv CategoryServer) {
	s.RegisterService(&Category_ServiceDesc, srv)
}

func _Category_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).ListCategories(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_CreateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CreateCategory(ctx, req.(*CategoryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_CategorySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CategorySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_CategorySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CategorySearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_CategoryFiltersSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).CategoryFiltersSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_CategoryFiltersSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).CategoryFiltersSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_GetCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).GetCategory(ctx, req.(*SlugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryWithSlug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_UpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).UpdateCategory(ctx, req.(*CategoryWithSlug))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).DeleteCategory(ctx, req.(*SlugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_ListCategoryFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).ListCategoryFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_ListCategoryFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).ListCategoryFilters(ctx, req.(*SlugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Category_ServiceDesc is the grpc.ServiceDesc for Category service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Category_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCategories",
			Handler:    _Category_ListCategories_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _Category_CreateCategory_Handler,
		},
		{
			MethodName: "CategorySearch",
			Handler:    _Category_CategorySearch_Handler,
		},
		{
			MethodName: "CategoryFiltersSearch",
			Handler:    _Category_CategoryFiltersSearch_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Category_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _Category_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Category_DeleteCategory_Handler,
		},
		{
			MethodName: "ListCategoryFilters",
			Handler:    _Category_ListCategoryFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/products.proto",
}

const (
	Favorite_ListFavorites_FullMethodName       = "/user.Favorite/ListFavorites"
	Favorite_AddToFavorites_FullMethodName      = "/user.Favorite/AddToFavorites"
	Favorite_RemoveFromFavorites_FullMethodName = "/user.Favorite/RemoveFromFavorites"
)

// FavoriteClient is the client API for Favorite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavoriteClient interface {
	ListFavorites(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*FavoriteListMsg, error)
	AddToFavorites(ctx context.Context, in *UserAndItemIds, opts ...grpc.CallOption) (*FavoriteMsg, error)
	RemoveFromFavorites(ctx context.Context, in *UserAndItemIds, opts ...grpc.CallOption) (*Empty, error)
}

type favoriteClient struct {
	cc grpc.ClientConnInterface
}

func NewFavoriteClient(cc grpc.ClientConnInterface) FavoriteClient {
	return &favoriteClient{cc}
}

func (c *favoriteClient) ListFavorites(ctx context.Context, in *UuidMsg, opts ...grpc.CallOption) (*FavoriteListMsg, error) {
	out := new(FavoriteListMsg)
	err := c.cc.Invoke(ctx, Favorite_ListFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) AddToFavorites(ctx context.Context, in *UserAndItemIds, opts ...grpc.CallOption) (*FavoriteMsg, error) {
	out := new(FavoriteMsg)
	err := c.cc.Invoke(ctx, Favorite_AddToFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favoriteClient) RemoveFromFavorites(ctx context.Context, in *UserAndItemIds, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Favorite_RemoveFromFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavoriteServer is the server API for Favorite service.
// All implementations must embed UnimplementedFavoriteServer
// for forward compatibility
type FavoriteServer interface {
	ListFavorites(context.Context, *UuidMsg) (*FavoriteListMsg, error)
	AddToFavorites(context.Context, *UserAndItemIds) (*FavoriteMsg, error)
	RemoveFromFavorites(context.Context, *UserAndItemIds) (*Empty, error)
	mustEmbedUnimplementedFavoriteServer()
}

// UnimplementedFavoriteServer must be embedded to have forward compatible implementations.
type UnimplementedFavoriteServer struct {
}

func (UnimplementedFavoriteServer) ListFavorites(context.Context, *UuidMsg) (*FavoriteListMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorites not implemented")
}
func (UnimplementedFavoriteServer) AddToFavorites(context.Context, *UserAndItemIds) (*FavoriteMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavorites not implemented")
}
func (UnimplementedFavoriteServer) RemoveFromFavorites(context.Context, *UserAndItemIds) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavorites not implemented")
}
func (UnimplementedFavoriteServer) mustEmbedUnimplementedFavoriteServer() {}

// UnsafeFavoriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavoriteServer will
// result in compilation errors.
type UnsafeFavoriteServer interface {
	mustEmbedUnimplementedFavoriteServer()
}

func RegisterFavoriteServer(s grpc.ServiceRegistrar, srv FavoriteServer) {
	s.RegisterService(&Favorite_ServiceDesc, srv)
}

func _Favorite_ListFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UuidMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).ListFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Favorite_ListFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).ListFavorites(ctx, req.(*UuidMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_AddToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndItemIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).AddToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Favorite_AddToFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).AddToFavorites(ctx, req.(*UserAndItemIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Favorite_RemoveFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndItemIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavoriteServer).RemoveFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Favorite_RemoveFromFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavoriteServer).RemoveFromFavorites(ctx, req.(*UserAndItemIds))
	}
	return interceptor(ctx, in, info, handler)
}

// Favorite_ServiceDesc is the grpc.ServiceDesc for Favorite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Favorite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Favorite",
	HandlerType: (*FavoriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFavorites",
			Handler:    _Favorite_ListFavorites_Handler,
		},
		{
			MethodName: "AddToFavorites",
			Handler:    _Favorite_AddToFavorites_Handler,
		},
		{
			MethodName: "RemoveFromFavorites",
			Handler:    _Favorite_RemoveFromFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/products.proto",
}

const (
	Promotion_ListPromotions_FullMethodName     = "/user.Promotion/ListPromotions"
	Promotion_PromotionSearch_FullMethodName    = "/user.Promotion/PromotionSearch"
	Promotion_CreatePromotion_FullMethodName    = "/user.Promotion/CreatePromotion"
	Promotion_GetPromotion_FullMethodName       = "/user.Promotion/GetPromotion"
	Promotion_UpdatePromotion_FullMethodName    = "/user.Promotion/UpdatePromotion"
	Promotion_DeletePromotion_FullMethodName    = "/user.Promotion/DeletePromotion"
	Promotion_ListPromotionItems_FullMethodName = "/user.Promotion/ListPromotionItems"
)

// PromotionClient is the client API for Promotion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromotionClient interface {
	ListPromotions(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedPromoRes, error)
	PromotionSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedPromoRes, error)
	CreatePromotion(ctx context.Context, in *PromoMsg, opts ...grpc.CallOption) (*PromoMsg, error)
	GetPromotion(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*PromoMsg, error)
	UpdatePromotion(ctx context.Context, in *PromoWithSlug, opts ...grpc.CallOption) (*PromoMsg, error)
	DeletePromotion(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*Empty, error)
	ListPromotionItems(ctx context.Context, in *ListPromotionItemsReq, opts ...grpc.CallOption) (*PaginatedPromoItemsRes, error)
}

type promotionClient struct {
	cc grpc.ClientConnInterface
}

func NewPromotionClient(cc grpc.ClientConnInterface) PromotionClient {
	return &promotionClient{cc}
}

func (c *promotionClient) ListPromotions(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PaginatedPromoRes, error) {
	out := new(PaginatedPromoRes)
	err := c.cc.Invoke(ctx, Promotion_ListPromotions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) PromotionSearch(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*PaginatedPromoRes, error) {
	out := new(PaginatedPromoRes)
	err := c.cc.Invoke(ctx, Promotion_PromotionSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) CreatePromotion(ctx context.Context, in *PromoMsg, opts ...grpc.CallOption) (*PromoMsg, error) {
	out := new(PromoMsg)
	err := c.cc.Invoke(ctx, Promotion_CreatePromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) GetPromotion(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*PromoMsg, error) {
	out := new(PromoMsg)
	err := c.cc.Invoke(ctx, Promotion_GetPromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) UpdatePromotion(ctx context.Context, in *PromoWithSlug, opts ...grpc.CallOption) (*PromoMsg, error) {
	out := new(PromoMsg)
	err := c.cc.Invoke(ctx, Promotion_UpdatePromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) DeletePromotion(ctx context.Context, in *SlugMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Promotion_DeletePromotion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promotionClient) ListPromotionItems(ctx context.Context, in *ListPromotionItemsReq, opts ...grpc.CallOption) (*PaginatedPromoItemsRes, error) {
	out := new(PaginatedPromoItemsRes)
	err := c.cc.Invoke(ctx, Promotion_ListPromotionItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromotionServer is the server API for Promotion service.
// All implementations must embed UnimplementedPromotionServer
// for forward compatibility
type PromotionServer interface {
	ListPromotions(context.Context, *ListReq) (*PaginatedPromoRes, error)
	PromotionSearch(context.Context, *SearchReq) (*PaginatedPromoRes, error)
	CreatePromotion(context.Context, *PromoMsg) (*PromoMsg, error)
	GetPromotion(context.Context, *SlugMsg) (*PromoMsg, error)
	UpdatePromotion(context.Context, *PromoWithSlug) (*PromoMsg, error)
	DeletePromotion(context.Context, *SlugMsg) (*Empty, error)
	ListPromotionItems(context.Context, *ListPromotionItemsReq) (*PaginatedPromoItemsRes, error)
	mustEmbedUnimplementedPromotionServer()
}

// UnimplementedPromotionServer must be embedded to have forward compatible implementations.
type UnimplementedPromotionServer struct {
}

func (UnimplementedPromotionServer) ListPromotions(context.Context, *ListReq) (*PaginatedPromoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromotions not implemented")
}
func (UnimplementedPromotionServer) PromotionSearch(context.Context, *SearchReq) (*PaginatedPromoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionSearch not implemented")
}
func (UnimplementedPromotionServer) CreatePromotion(context.Context, *PromoMsg) (*PromoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromotion not implemented")
}
func (UnimplementedPromotionServer) GetPromotion(context.Context, *SlugMsg) (*PromoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotion not implemented")
}
func (UnimplementedPromotionServer) UpdatePromotion(context.Context, *PromoWithSlug) (*PromoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotion not implemented")
}
func (UnimplementedPromotionServer) DeletePromotion(context.Context, *SlugMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePromotion not implemented")
}
func (UnimplementedPromotionServer) ListPromotionItems(context.Context, *ListPromotionItemsReq) (*PaginatedPromoItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPromotionItems not implemented")
}
func (UnimplementedPromotionServer) mustEmbedUnimplementedPromotionServer() {}

// UnsafePromotionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromotionServer will
// result in compilation errors.
type UnsafePromotionServer interface {
	mustEmbedUnimplementedPromotionServer()
}

func RegisterPromotionServer(s grpc.ServiceRegistrar, srv PromotionServer) {
	s.RegisterService(&Promotion_ServiceDesc, srv)
}

func _Promotion_ListPromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).ListPromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_ListPromotions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).ListPromotions(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_PromotionSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).PromotionSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_PromotionSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).PromotionSearch(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_CreatePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).CreatePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_CreatePromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).CreatePromotion(ctx, req.(*PromoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_GetPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).GetPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_GetPromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).GetPromotion(ctx, req.(*SlugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_UpdatePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoWithSlug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).UpdatePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_UpdatePromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).UpdatePromotion(ctx, req.(*PromoWithSlug))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_DeletePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlugMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).DeletePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_DeletePromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).DeletePromotion(ctx, req.(*SlugMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promotion_ListPromotionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromotionItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionServer).ListPromotionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promotion_ListPromotionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionServer).ListPromotionItems(ctx, req.(*ListPromotionItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Promotion_ServiceDesc is the grpc.ServiceDesc for Promotion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Promotion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Promotion",
	HandlerType: (*PromotionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPromotions",
			Handler:    _Promotion_ListPromotions_Handler,
		},
		{
			MethodName: "PromotionSearch",
			Handler:    _Promotion_PromotionSearch_Handler,
		},
		{
			MethodName: "CreatePromotion",
			Handler:    _Promotion_CreatePromotion_Handler,
		},
		{
			MethodName: "GetPromotion",
			Handler:    _Promotion_GetPromotion_Handler,
		},
		{
			MethodName: "UpdatePromotion",
			Handler:    _Promotion_UpdatePromotion_Handler,
		},
		{
			MethodName: "DeletePromotion",
			Handler:    _Promotion_DeletePromotion_Handler,
		},
		{
			MethodName: "ListPromotionItems",
			Handler:    _Promotion_ListPromotionItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/products.proto",
}
